"""
Pydantic model for Schools, sourced from the schema in Project_Connect_School_Schema_UNICEF_DB.xlsx
"""

from datetime import datetime
from typing import Optional
from uuid import UUID

from pydantic import (
    BaseModel,
    EmailStr,
    Field,
    PositiveFloat,
    PositiveInt,
    confloat,
    constr,
)

from .Connectivity import Connectivity
from .EducationLevel import EducationLevel
from .Environment import Environment
from .Latitude import Latitude
from .Longitude import Longitude
from .SchoolType import SchoolType
from .TowerTypeService import TowerTypeService


class School(BaseModel):
    """Pydantic model"""

    # TODO validate country_code vs list of ISO codes
    country_code: constr(min_length=2, max_length=2) = Field(
        ...
    )  # ISO Alpha-2 Code (US, ES,…) (Required)
    admin0: Optional[str]  # Country
    admin1: Optional[str]  # State / Dept
    admin2: Optional[str]  # County / Province
    admin3: Optional[str]  # District /
    admin4: Optional[str]  # Location
    admin_code: Optional[str]  # local code(xx - yy - zz)
    admin_id: Optional[
        str
    ]  # string that identifies uniquely the geographic admin , and easy to spotcheck: CountryCode_GADM Version _ Index (admin0) _ Index (admin1) _Index (admin2) _ downcase of admin
    name: str = Field(...)  # string: Amazonas (Required)
    address: Optional[str]
    address2: Optional[str]  # Number on street
    phone_number: Optional[str]
    person_contact: Optional[str]  # string: name
    email: Optional[EmailStr]
    postal_code: Optional[str]
    # TODO: validate null lon/lat
    lon: Longitude = Field(...)  # longitude (Required)
    lat: Latitude = Field(...)  # latitude (Required)
    altitude: Optional[
        confloat(ge=-411, le=8850)
    ]  # number[m]  min and max are for the world (meters)
    gps_confidence: Optional[confloat(ge=0, le=100)]  # number[%]
    date: Optional[datetime]  # date when it was created
    num_students: Optional[int]  # of students
    num_teachers: Optional[int]  # of teachers
    connectivity: Optional[bool]  # internet connectivity
    type_connectivity: Optional[Connectivity]
    speed_connectivity: Optional[
        confloat(ge=0, le=12500000)
    ]  # number[kbps] 12500000 kbps is ~100 gigabit/sec
    latency_connectivity: Optional[
        confloat(ge=0, le=5000)
    ]  # number[ms]  5000 ms is ~5 seconds
    availability_connectivity: Optional[confloat(ge=0, le=100)]  # number [%]
    num_computers: Optional[PositiveInt]  # of computers/tablets
    type_school: Optional[
        SchoolType
    ]  # type of school(private, government, religious???
    educ_level: Optional[EducationLevel]  # primary, secondary,…
    environment: Optional[Environment]  # Urban, semi - rural, rural
    num_classrooms: Optional[PositiveInt]  # of classrooms
    num_sections: Optional[PositiveInt]  # of sections
    water: Optional[bool]  # Yes / No
    electricity: Optional[bool]  # Yes / No
    num_latrines: Optional[PositiveInt]  # of latrines
    provider: Optional[str]
    description: Optional[str]
    last_update: Optional[datetime]
    tower_dist: Optional[PositiveFloat]  # number[km]
    tower_type_service: Optional[TowerTypeService]  # (2G, 3G, 4G, Wifi)
    tower_type: Optional[str]
    tower_code: Optional[str]
    # TODO: validate null tower_lat/lng
    tower_latitude: Optional[confloat(ge=-90, le=90)]
    tower_longitude: Optional[confloat(ge=-180, le=180)]
    owner: str = Field(...)  # ProCo(vs UNICEF, ...) (Required)
    is_private: bool = Field(...)  # (Required)
    provider_is_private: bool = Field(...)  # (Required)
    # TODO: make uuid required?
    uuid: Optional[
        UUID
    ]  # unique id generated by devseed ML training data validation scripts
